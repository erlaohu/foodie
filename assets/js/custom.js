/*global jQuery:false */
jQuery(document).ready(function($) {
"use strict";

	$(".navbar-default .navbar-toggle").click(function() {
		$(this).toggleClass('active');
	});

	//add some elements with animate effect
	$(".big-cta").hover(
		function () {
		$('.cta a').addClass("animated shake");
		},
		function () {
		$('.cta a').removeClass("animated shake");
		}
	);
	$(".box").hover(
		function () {
		$(this).find('.icon').addClass("animated fadeInDown");
		$(this).find('p').addClass("animated fadeInUp");
		},
		function () {
		$(this).find('.icon').removeClass("animated fadeInDown");
		$(this).find('p').removeClass("animated fadeInUp");
		}
	);
	
	
	$('.accordion').on('show', function (e) {
	
		$(e.target).prev('.accordion-heading').find('.accordion-toggle').addClass('active');
		$(e.target).prev('.accordion-heading').find('.accordion-toggle i').removeClass('icon-plus');
		$(e.target).prev('.accordion-heading').find('.accordion-toggle i').addClass('icon-minus');
	});
	
	$('.accordion').on('hide', function (e) {
		$(this).find('.accordion-toggle').not($(e.target)).removeClass('active');
		$(this).find('.accordion-toggle i').not($(e.target)).removeClass('icon-minus');
		$(this).find('.accordion-toggle i').not($(e.target)).addClass('icon-plus');
	});	

	
	// tooltip
	$('.social-network li a, .options_box .color a').tooltip();

	// fancybox
	$(".fancybox").fancybox({				
			padding : 0,
			autoResize: true,
			beforeShow: function () {
				this.title = $(this.element).attr('title');
				this.title = '<h4>' + this.title + '</h4>' + '<p>' + $(this.element).parent().find('img').attr('alt') + '</p>';
			},
			helpers : {
				title : { type: 'inside' },
			}
		});

	
	//scroll to top
	$(window).scroll(function(){
		if ($(this).scrollTop() > 100) {
			$('.scrollup').fadeIn();
			} else {
			$('.scrollup').fadeOut();
		}
	});

	$('.scrollup').click(function(){
		$("html, body").animate({ scrollTop: 0 }, 1000);
			return false;
	});

    $('#post-slider').flexslider({
        // Primary Controls
        controlNav          : false,              //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
        directionNav        : true,              //Boolean: Create navigation for previous/next navigation? (true/false)
        prevText            : "Previous",        //String: Set the text for the "previous" directionNav item
        nextText            : "Next",            //String: Set the text for the "next" directionNav item
         
        // Secondary Navigation
        keyboard            : true,              //Boolean: Allow slider navigating via keyboard left/right keys
        multipleKeyboard    : false,             //{NEW} Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
        mousewheel          : false,             //{UPDATED} Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel
        pausePlay           : false,             //Boolean: Create pause/play dynamic element
        pauseText           : 'Pause',           //String: Set the text for the "pause" pausePlay item
        playText            : 'Play',            //String: Set the text for the "play" pausePlay item
         
        // Special properties
        controlsContainer   : "",                //{UPDATED} Selector: USE CLASS SELECTOR. Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be ".flexslider-container". Property is ignored if given element is not found.
        manualControls      : "",                //Selector: Declare custom control navigation. Examples would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
        sync                : "",                //{NEW} Selector: Mirror the actions performed on this slider with another slider. Use with care.
        asNavFor            : "",                //{NEW} Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider
    });
	
    $('#main-slider').flexslider({
        namespace           : "flex-",           //{NEW} String: Prefix string attached to the class of every element generated by the plugin
        selector            : ".slides > li",    //{NEW} Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
        animation           : "fade",            //String: Select your animation type, "fade" or "slide"
        easing              : "swing",           //{NEW} String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!
        direction           : "horizontal",      //String: Select the sliding direction, "horizontal" or "vertical"
        reverse             : false,             //{NEW} Boolean: Reverse the animation direction
        animationLoop       : true,              //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
        smoothHeight        : false,             //{NEW} Boolean: Allow height of the slider to animate smoothly in horizontal mode
        startAt             : 0,                 //Integer: The slide that the slider should start on. Array notation (0 = first slide)
        slideshow           : true,              //Boolean: Animate slider automatically
        slideshowSpeed      : 7000,              //Integer: Set the speed of the slideshow cycling, in milliseconds
        animationSpeed      : 600,               //Integer: Set the speed of animations, in milliseconds
        initDelay           : 0,                 //{NEW} Integer: Set an initialization delay, in milliseconds
        randomize           : false,             //Boolean: Randomize slide order
         
        // Usability features
        pauseOnAction       : true,              //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
        pauseOnHover        : false,             //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering
        useCSS              : true,              //{NEW} Boolean: Slider will use CSS3 transitions if available
        touch               : true,              //{NEW} Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
        video               : false,             //{NEW} Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches
         
        // Primary Controls
        controlNav          : true,              //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
        directionNav        : true,              //Boolean: Create navigation for previous/next navigation? (true/false)
        prevText            : "Previous",        //String: Set the text for the "previous" directionNav item
        nextText            : "Next",            //String: Set the text for the "next" directionNav item
         
        // Secondary Navigation
        keyboard            : true,              //Boolean: Allow slider navigating via keyboard left/right keys
        multipleKeyboard    : false,             //{NEW} Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
        mousewheel          : false,             //{UPDATED} Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel
        pausePlay           : false,             //Boolean: Create pause/play dynamic element
        pauseText           : 'Pause',           //String: Set the text for the "pause" pausePlay item
        playText            : 'Play',            //String: Set the text for the "play" pausePlay item
         
        // Special properties
        controlsContainer   : "",                //{UPDATED} Selector: USE CLASS SELECTOR. Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be ".flexslider-container". Property is ignored if given element is not found.
        manualControls      : "",                //Selector: Declare custom control navigation. Examples would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
        sync                : "",                //{NEW} Selector: Mirror the actions performed on this slider with another slider. Use with care.
        asNavFor            : "",                //{NEW} Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider
    });

    // 画面显示时候，根据选中的下拉框值设定选中项目
    $('select').each(function(){

        var thisSelectBox = $(this);
        var hidden = thisSelectBox.prev();
        // 下拉框多个选择之后，不能回显的对应
        var hiddenVal = hidden.val();
        if(hiddenVal != "") {
            if (hiddenVal == '全部') {
                thisSelectBox.find('option').attr("selected",true);
            } else {
                var aryScope = hiddenVal.split(',');
                var start = 0;
                thisSelectBox.find('option').each(function() {
                    for (var i = start; i < aryScope.length; i++) {
                        if($(this).val() == aryScope[i].trim()) {
                            // 下拉框设置选中
                            $(this).attr("selected",true);
                            start++;
                            break;
                        }
                    }
                });
            }
        }
    });

    // 下拉框的初期设定
    $('#area-select').multiselect({
        nonSelectedText: '地点',
        nSelectedText: '被选择',
        selectAllText: '全部选择',
        includeSelectAllOption: true,
        allSelectedText: '全部地点',
        numberDisplayed: 99,
        onDropdownHide: function(options, checked) {
            var selectedEl = $('#area-select').next().children().find('li.active input');
            var hiddenVal;
            for (var i = 0; i < selectedEl.length; i++) {
                if (i == 0) {
                    hiddenVal = $(selectedEl[i]).val();
                } else {
                    hiddenVal = hiddenVal + ', ' + $(selectedEl[i]).val();
                }
            }
            // 把下拉框选中的值在hidden中保存
            $('#area-select').parent().prev().val(hiddenVal);
        }
    });

    $('#type-select').multiselect({
        nonSelectedText: '料理类别',
        nSelectedText: '被选择',
        selectAllText: '全部选择',
        includeSelectAllOption: true,
        allSelectedText: '全部料理类别',
        numberDisplayed: 99,
        onDropdownHide: function(options, checked) {
            var selectedEl = $('#type-select').next().children().find('li.active input');
            var hiddenVal;
            for (var i = 0; i < selectedEl.length; i++) {
                if (i == 0) {
                    hiddenVal = $(selectedEl[i]).val();
                } else {
                    hiddenVal = hiddenVal + ', ' + $(selectedEl[i]).val();
                }
            }
            // 把下拉框选中的值在hidden中保存
            $('#type-select').parent().prev().val(hiddenVal);
        }
    });

    $('#consume-select').multiselect({
        nonSelectedText: '人均消费',
        nSelectedText: '被选择',
        selectAllText: '全部选择',
        includeSelectAllOption: true,
        allSelectedText: '全部人均消费',
        numberDisplayed: 99,
        onDropdownHide: function(options, checked) {
            // 把下拉框选中的值在hidden中保存
            var selectVal = $('#consume-select').next().children().attr('title');
            selectVal = selectVal.replace('0～5千', '0～5000');
            selectVal = selectVal.replace('5千～1万', '5000～10000');
            selectVal = selectVal.replace('1万以上', '10000～100000');
            $('#consume-select').parent().prev().val(selectVal);
        }
    });

    $('.multiselect-native-select .btn-group button').css('border-radius', '0');

    $('button[type=submit]').click(function() {
        var areaVal = $('#area').val();
        if (areaVal == '' || areaVal == '地点') {
            $('.error-msg > div').text('地点必须选择！');
            $('.error-msg').show();
            return false;
        }
        var typeVal = $('#type').val();
        if(typeVal == '' || typeVal == '料理类别') {
            $('.error-msg > div').text('料理类别必须选择！');
            $('.error-msg').show();
            return false;
        }
        var consumeVal = $('#consume').val();
        if(consumeVal == '' || consumeVal == '金额') {
            $('.error-msg > div').text('人均消费必须选择！');
            $('.error-msg').show();
            return false;
        }
    });

    // 预约微信二维码
    $('.appointment-weixin').click(function(event) {
        $('.popover.weixin').slideDown( "slow");
    });

    $('.popover.weixin').click(function() {
        if($(this).is(':visible')) {
            $(this).slideUp( "slow");
        }
    });

    // 点击DIV的时候跳转子页面
    $('.box-bottom').click(function() {
        window.location = $(this).children('a').prop('href');
    });
});